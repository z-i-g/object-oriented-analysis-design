Формируем архитектуру, задаём принципы поведения системы: схемы создания объектов, обработки событий,
увязки с выбранными фреймворками и технологиями, и тесты для типовых сценариев (проектирование).

1. Для создания объектов будет применяться паттен "Фабричный метод" (например BonusFactory).
При старте GameEngine инициализирует GameBoard с генерацией случайных элементов;

2. GameEngine реализует основной цикл переходов/обработки:
•	включая приём/проверка валидности ходов;
•	обработка найденных совпадений (CombinationDetector), обновление поля (BoardUpdater),
создание бонусов (BonusFactory), статистика (StatisticManager, Score).

3. Планируется использование стандартных библиотек языка;
Было решено добавить еще объекты Move, Coordinate, Statistic и Combination. Будут создаваться как неизменяемые объекты-значения
record в Java для передачи данных и ведения истории ходов и совпадений.

4. Тесты для типовых сценариев:
•	Инициализация игры.
Проверка создания игрового поля без изначальных совпадений, корректность размера и заполнения;
•	Перестановка элементов.
Тесты на валидность/невалидность ходов, корректную смену состояния поля, откат в случае неправильного хода;
•	Обнаружение и удаление комбинаций.
Проверка, что CombinationDetector находит все правильные цепочки, а BoardUpdater корректно их удаляет, сдвигает элементы и заполняет пустые клетки;
•	Создание и активация бонусов.
Убедиться, что BonusFactory создаёт бонусы в нужных случаях, и что активация бонуса изменяет поле согласно правилам;
•	Подсчёт очков и статистика.
Проверка корректного подсчёта очков, учёта прогрессивных бонусов, правильной записи истории ходов и вывод итоговой статистики;
•	Завершение игры.
Правильное выявление момента отсутствия ходов и генерация соответствующего события или состояния.